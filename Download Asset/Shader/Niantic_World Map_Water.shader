//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Niantic/World Map/Water" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
[Space] _Color ("Tint Color", Color) = (1,1,1,1)
_MainColor ("Base Color", Color) = (1,1,1,1)
_TextureScale ("Texture Scale", Float) = 0.01
_ColorRamp ("1D Gradient Ramp (RGB)", 2D) = "white" { }
_NearDist ("Near Distance", Float) = 100
_FarDist ("Far Distance", Float) = 250
_Offset ("Z Offset", Float) = 10
[Header(Depth)] _DepthTex ("Depth Texture", 2D) = "white" { }
_DepthColor ("Depth Color", Color) = (1,1,1,1)
_DepthScaleA ("Depth Scale A", Float) = 0.1
_DepthScaleB ("Depth Scale B", Float) = 0.13
_Speed ("Speed", Float) = 0.02
[Header(Normal)] _NormalTex ("Normal Texture", 2D) = "normal" { }
_NormalDistortionScale ("Normal Distortion Scale", Float) = 0.1
_NormalScaleA ("Normal Scale A", Float) = 4
_NormalScaleB ("Normal Scale B", Float) = 1.2
_NormalIntensityBlend ("Normal Intensity Blend", Float) = 0.8
_NormalOffset ("Normal Offset", Float) = 0.5
_NormalRimBias ("Normal Rim Bias", Float) = 0.3
[Header(Sun)] _SunNearColor ("Sun Near Color", Color) = (1,1,1,1)
_SunFarColor ("Sun Far Color", Color) = (1,1,1,1)
_SunFalloff ("Sun Falloff", Float) = 0.01
_SunSize ("Sun Size", Float) = 0.2
_SunPinch ("Sun Pinch", Float) = 10
_SkydomeScale ("Skydome Scale", Float) = 300
_SunDirectionYBias ("Sun Direction Y Bias", Float) = 0.05
_SunThresholdA ("Sun Threshold A", Float) = 0.37
_SunThresholdB ("Sun Threshold B", Float) = 0.17
_ShapeBrightnessA ("Shape Brightness A", Float) = 1
_ShapeBrightnessB ("Shape Brightness B", Float) = 0.1
_SunGlowPower ("Sun Glow Power", Float) = 4
_SunGlowBrightness ("Sun Glow Brightness", Float) = 0.8
_SunIntensity ("Sun Intensity", Float) = 1
[KeywordEnum(MULTIPLY, ADD)] RAMP_FUNC ("Ramp Function", Float) = 0
}
SubShader {
 LOD 150
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 150
  Tags { "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZTest Always
  Stencil {
   Ref 2
   Comp Always
   Pass Replace
   Fail Keep
   ZFail Keep
  }
  GpuProgramID 44795
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    SV_Target0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(2) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat20;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat2.x = dot(u_xlat1.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 + (-u_xlat2.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat2.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat2.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat20 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat20 = min(max(u_xlat20, 0.0), 1.0);
#else
    u_xlat20 = clamp(u_xlat20, 0.0, 1.0);
#endif
    u_xlat2.xyz = vec3(u_xlat20) * u_xlat2.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat2.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
uniform lowp sampler2D _DepthTex;
uniform lowp sampler2D _NormalTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec2 vs_TEXCOORD2;
varying highp vec3 vs_TEXCOORD3;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat10_7.xyz = texture2D(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat10_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat10_0.xyz = texture2D(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat10_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat10_1 = texture2D(_DepthTex, u_xlat16_9.xy);
    u_xlat10_2 = texture2D(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat10_1, u_xlat10_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat10_0 = texture2D(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat10_0, u_xlat1);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat10_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat10_1;
    u_xlat10_2 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat10_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat10_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
mediump  vec4 phase0_Output0_1;
out mediump vec2 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD3;
out highp float vs_TEXCOORD1;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat12;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    u_xlat1.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat2.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat2.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat12 = dot(u_xlat2.xyz, u_xlat1.xyz);
    u_xlat12 = (-u_xlat12) + (-_NearDist);
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat12 = u_xlat12 / u_xlat16_3;
    u_xlat1.zw = vec2(u_xlat12);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.zw = min(max(u_xlat1.zw, 0.0), 1.0);
#else
    u_xlat1.zw = clamp(u_xlat1.zw, 0.0, 1.0);
#endif
    u_xlat1.xy = u_xlat0.xz * vec2(vec2(_TextureScale, _TextureScale));
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    phase0_Output0_1 = u_xlat1;
vs_TEXCOORD0 = phase0_Output0_1.xy;
vs_TEXCOORD2 = phase0_Output0_1.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _Saturation;
uniform 	mediump vec4 _DepthColor;
uniform 	mediump float _DepthScaleA;
uniform 	mediump float _DepthScaleB;
uniform 	mediump float _Speed;
uniform 	mediump float _NormalDistortionScale;
uniform 	mediump float _NormalScaleA;
uniform 	mediump float _NormalScaleB;
uniform 	mediump float _NormalIntensityBlend;
uniform 	mediump float _NormalOffset;
uniform 	mediump float _NormalRimBias;
uniform 	vec3 _SunDirection;
uniform 	mediump float _SunThresholdA;
uniform 	mediump float _SunThresholdB;
uniform 	mediump float _ShapeBrightnessA;
uniform 	mediump float _ShapeBrightnessB;
uniform 	mediump float _SunGlowPower;
uniform 	mediump float _SunGlowBrightness;
uniform 	float _SunPinch;
uniform 	mediump vec4 _SunNearColor;
uniform 	mediump vec4 _SunFarColor;
uniform 	mediump float _SunIntensity;
uniform 	mediump float _SunDirectionYBias;
uniform 	vec3 _SkydomePosition;
uniform 	mediump float _SkydomeScale;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
UNITY_LOCATION(2) uniform mediump sampler2D _DepthTex;
UNITY_LOCATION(3) uniform mediump sampler2D _NormalTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec2 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD3;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec2 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
float u_xlat6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_9;
vec2 u_xlat12;
mediump float u_xlat16_12;
float u_xlat18;
float u_xlat23;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xz * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale));
    u_xlat0.xy = sin(u_xlat0.xy);
    u_xlat0.x = u_xlat0.y + u_xlat0.x;
    u_xlat0.xy = u_xlat0.xx * vec2(vec2(_NormalDistortionScale, _NormalDistortionScale)) + vs_TEXCOORD0.xy;
    u_xlat12.xy = u_xlat0.xy + vec2(vec2(_NormalOffset, _NormalOffset));
    u_xlat12.x = u_xlat12.x * _NormalScaleB;
    u_xlat1.x = _Time.y * _Speed;
    u_xlat2.x = u_xlat1.x * -0.5 + u_xlat12.x;
    u_xlat2.y = u_xlat12.y * _NormalScaleB + u_xlat1.x;
    u_xlat16_7.xyz = texture(_NormalTex, u_xlat2.xy).xyz;
    u_xlat16_3.xyz = u_xlat16_7.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(_NormalScaleA) + u_xlat1.xx;
    u_xlat16_0.xyz = texture(_NormalTex, u_xlat0.xy).xyz;
    u_xlat16_4.xyz = u_xlat16_0.xzy * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.xyz = u_xlat16_3.xyz + (-u_xlat16_4.xyz);
    u_xlat0.xyz = vec3(vec3(_NormalIntensityBlend, _NormalIntensityBlend, _NormalIntensityBlend)) * u_xlat0.xyz + u_xlat16_4.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = vs_TEXCOORD3.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat2.x = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat7.xyz = u_xlat7.xyz * u_xlat2.xxx;
    u_xlat2.xz = u_xlat7.xz * vec2(_NormalRimBias);
    u_xlat2.y = 0.0;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat18) + u_xlat2.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat2.xyz = _SunDirection.xyz * vec3(_SkydomeScale) + _SkydomePosition.xyz;
    u_xlat5.xz = _WorldSpaceCameraPos.xz;
    u_xlat5.y = 0.0;
    u_xlat2.xyz = (-u_xlat2.xyz) + u_xlat5.xyz;
    u_xlat18 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xz = vec2(u_xlat18) * u_xlat2.xz;
    u_xlat2.w = u_xlat2.y * u_xlat18 + (-_SunDirectionYBias);
    u_xlat18 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat7.xyz = u_xlat2.xwz * vec3(u_xlat18) + u_xlat7.xyz;
    u_xlat18 = dot(u_xlat7.xyz, u_xlat7.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat2.xyz = vec3(u_xlat18) * u_xlat7.xyz;
    u_xlat2.w = (-u_xlat2.y);
    u_xlat0.x = dot(u_xlat0.xzy, u_xlat2.xzw);
    u_xlat6 = max((-u_xlat2.y), 0.0);
    u_xlat6 = log2(u_xlat6);
    u_xlat6 = u_xlat6 * _SunGlowPower;
    u_xlat0.y = exp2(u_xlat6);
    u_xlat0.x = max(u_xlat0.x, 0.0);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _SunPinch;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat16_3.xy = u_xlat0.yx * vec2(_SunIntensity);
    u_xlatb0.xy = greaterThanEqual(u_xlat16_3.yyyy, vec4(_SunThresholdA, _SunThresholdB, _SunThresholdA, _SunThresholdA)).xy;
    u_xlat16_9.x = _SunIntensity * _SunIntensity;
    u_xlat12.xy = u_xlat16_9.xx * vec2(_ShapeBrightnessA, _ShapeBrightnessB);
    u_xlat16_9.x = (u_xlatb0.x) ? u_xlat12.x : float(0.0);
    u_xlat16_9.y = (u_xlatb0.y) ? u_xlat12.y : float(0.0);
    u_xlat16_9.x = u_xlat16_9.y + u_xlat16_9.x;
    u_xlat16_3.x = u_xlat16_3.x * _SunGlowBrightness + u_xlat16_9.x;
    u_xlat16_3.x = min(u_xlat16_3.x, 1.0);
    u_xlat0.y = vs_TEXCOORD0.y * _DepthScaleB + u_xlat1.x;
    u_xlat0.xw = vs_TEXCOORD0.xy * vec2(_DepthScaleB, _DepthScaleA) + (-u_xlat1.xx);
    u_xlat16_9.xy = vs_TEXCOORD0.xy * vec2(_DepthScaleA) + u_xlat1.xx;
    u_xlat16_1 = texture(_DepthTex, u_xlat16_9.xy);
    u_xlat16_2 = texture(_DepthTex, u_xlat0.xy);
    u_xlat1 = max(u_xlat16_1, u_xlat16_2);
    u_xlat16_12 = vs_TEXCOORD0.x * _DepthScaleA;
    u_xlat0.z = u_xlat16_12;
    u_xlat16_0 = texture(_DepthTex, u_xlat0.zw);
    u_xlat0 = max(u_xlat16_0, u_xlat1);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat2 = (-u_xlat16_1) + _MainColor;
    u_xlat1 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat16_1;
    u_xlat16_2 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_9.xyz = u_xlat1.xyz * u_xlat16_2.xyz;
    u_xlat5.x = dot(u_xlat16_9.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_1 = u_xlat1 * u_xlat16_2 + (-u_xlat5.xxxx);
    u_xlat16_9.x = _Color.w * _Saturation;
    u_xlat16_1 = u_xlat16_9.xxxx * u_xlat16_1 + u_xlat5.xxxx;
    u_xlat16_9.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_9.xyz = u_xlat16_9.xyz * glstate_lightmodel_ambient.xyz;
    u_xlat16_1.xyz = u_xlat16_9.xyz * vec3(8.0, 8.0, 8.0);
    u_xlat0 = u_xlat0 * _DepthColor + u_xlat16_1;
    u_xlat16_1 = u_xlat0 * u_xlat0 + (-u_xlat0);
    u_xlat16_0 = u_xlat16_1 * vec4(0.5, 0.5, 0.5, 0.5) + u_xlat0;
    u_xlat16_1 = (-_SunNearColor) + _SunFarColor;
    u_xlat16_1 = vs_TEXCOORD2.xxxx * u_xlat16_1 + _SunNearColor;
    u_xlat16_0 = u_xlat16_1 * u_xlat16_3.xxxx + u_xlat16_0;
    u_xlat5.xyz = u_xlat16_0.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat23 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
    u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
    u_xlat5.xyz = vec3(u_xlat23) * u_xlat5.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat5.xyz;
    return;
}

#endif
"
}
}
}
}
}