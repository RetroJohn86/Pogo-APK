//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Niantic/World Map/Ground" {
Properties {
_MainTex ("Base (RGB)", 2D) = "white" { }
_TextureScale ("Texture Scale", Float) = 0.01
_ColorRamp ("1D Gradient Ramp (RGB)", 2D) = "white" { }
_BaseStrength ("Base Texture Strength", Range(0, 1)) = 1
_AmbientStrength ("Ambient Strength", Range(0, 1)) = 0
_AmbientTintPower ("Ambient Tint Power", Float) = 0
_AmbientTint ("Ambient Tint", Color) = (1,1,1,1)
_NearDist ("Near Distance", Float) = 100
_FarDist ("Far Distance", Float) = 250
_Offset ("Z Offset", Float) = 10
[Header(DETAIL TEXTURE____________)] [Toggle(ENABLE_DETAIL_TEX)] _EnableDetailTex ("Enable Detail Texture", Float) = 0
_DetailTex ("Detail Texture", 2D) = "black" { }
_DetailStrength ("Detail Texture Strength", Range(0, 1)) = 1
_DetailAmbientStrength ("Detail Ambient Strength", Range(0, 1)) = 0
_DetailTextureScale ("Detail Texture Scale", Float) = 0.01
_DetailShadowColor ("Detail Shadow Color", Color) = (1,1,1,1)
_RandomizeDetailRot ("Randomize Detail Rotation", Float) = 1
_MaskOpacity ("Mask Opacity", Range(0, 1)) = 1
_MaskContrast ("Mask Contrast", Float) = 1
_MaskTextureScale ("Noise Texture Scale", Float) = 0.01
_RandomizeMaskRot ("Randomize Detail Rotation", Float) = 1
_HeightTex ("Base (RGB)", 2D) = "white" { }
_HeightBlendFactor ("Height blend factor", Float) = 1
_EdgeBlendOffset ("Edge blend offset", Float) = 0.2
[Header(RAMP COLOR____________)] [KeywordEnum(MULTIPLY, ADD)] RAMP_FUNC ("Ramp Function", Float) = 0
_Color ("Tint Color", Color) = (1,1,1,1)
_Saturation ("Saturation", Float) = 1
_FadeIntensity ("Fade Intensity", Range(0, 1)) = 0.5
}
SubShader {
 LOD 150
 Tags { "RenderType" = "Opaque" }
 Pass {
  LOD 150
  Tags { "RenderType" = "Opaque" "SHADOWSUPPORT" = "true" }
  ZTest Always
  GpuProgramID 32753
Program "vp" {
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
float u_xlat3;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3 = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-vec4(u_xlat3));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat3);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    SV_Target0.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz;
    SV_Target0.w = u_xlat16_0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_ADD" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "RAMP_FUNC_MULTIPLY" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "LIGHTPROBE_SH" "SHADOWS_SCREEN" "VERTEXLIGHT_ON" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat1 = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-vec4(u_xlat1));
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + vec4(u_xlat1);
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_ADD" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_1.xyz;
    u_xlat16_2.w = 0.0;
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + u_xlat16_2;
    u_xlat16_1.x = float(0.5);
    u_xlat16_1.z = float(0.75);
    u_xlat16_0 = u_xlat16_0 + u_xlat16_1.xxzw;
    u_xlat3.x = dot(u_xlat16_0.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 100

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
attribute highp vec4 in_POSITION0;
varying mediump vec2 vs_TEXCOORD0;
varying highp vec2 vs_TEXCOORD4;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
varying mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _ColorRamp;
varying mediump vec2 vs_TEXCOORD0;
varying mediump vec3 vs_TEXCOORD2;
varying highp float vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
lowp vec4 u_xlat10_0;
mediump vec4 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat10_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat10_1 = texture2D(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat10_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "DIRECTIONAL" "FOG_LINEAR" "RAMP_FUNC_MULTIPLY" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 unity_FogParams;
uniform 	mediump float _NearDist;
uniform 	mediump float _FarDist;
uniform 	mediump float _TextureScale;
uniform 	mediump vec4 _Color;
in highp vec4 in_POSITION0;
out mediump vec2 vs_TEXCOORD0;
out highp vec2 vs_TEXCOORD4;
out mediump vec3 vs_TEXCOORD2;
out highp float vs_TEXCOORD1;
out mediump vec3 vs_TEXCOORD3;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
mediump float u_xlat16_3;
float u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat0;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD1 = u_xlat1.z * unity_FogParams.z + unity_FogParams.w;
    u_xlat1.xy = u_xlat0.xz * vec2(_TextureScale);
    vs_TEXCOORD0.xy = u_xlat1.xy;
    u_xlat1.xyz = u_xlat0.xyz / u_xlat0.www;
    vs_TEXCOORD4.xy = u_xlat0.xz;
    u_xlat0.xyz = u_xlat1.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat1.x = hlslcc_mtx4x4unity_MatrixV[0].z;
    u_xlat1.y = hlslcc_mtx4x4unity_MatrixV[1].z;
    u_xlat1.z = hlslcc_mtx4x4unity_MatrixV[2].z;
    u_xlat0.x = dot(u_xlat1.xyz, u_xlat0.xyz);
    u_xlat4 = (-u_xlat0.x) + (-_NearDist);
    u_xlat1.z = (-u_xlat0.x) / _FarDist;
    u_xlat16_3 = (-_NearDist) + _FarDist;
    u_xlat0.x = u_xlat4 / u_xlat16_3;
    u_xlat1.xy = u_xlat0.xx;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    vs_TEXCOORD2.xyz = u_xlat1.xyz;
    vs_TEXCOORD3.xyz = _Color.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump vec4 glstate_lightmodel_ambient;
uniform 	mediump vec4 unity_FogColor;
uniform 	mediump float _BaseStrength;
uniform 	mediump vec4 _Color;
uniform 	mediump float _Saturation;
uniform 	mediump float _FadeIntensity;
UNITY_LOCATION(0) uniform mediump sampler2D _MainTex;
UNITY_LOCATION(1) uniform mediump sampler2D _ColorRamp;
in mediump vec2 vs_TEXCOORD0;
in mediump vec3 vs_TEXCOORD2;
in highp float vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
float u_xlat15;
void main()
{
    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);
    u_xlat16_0 = u_xlat16_0 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_0 = vec4(_BaseStrength) * u_xlat16_0 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_1 = texture(_ColorRamp, vs_TEXCOORD2.xy);
    u_xlat16_1 = u_xlat16_1 + vec4(-0.5, -0.5, -0.75, -0.0);
    u_xlat16_1 = vec4(_BaseStrength) * u_xlat16_1 + vec4(0.5, 0.5, 0.75, 0.0);
    u_xlat16_2.xyz = u_xlat16_0.xyz * u_xlat16_1.xyz;
    u_xlat3.x = dot(u_xlat16_2.xyz, vec3(0.300000012, 0.589999974, 0.109999999));
    u_xlat16_0 = u_xlat16_0 * u_xlat16_1 + (-u_xlat3.xxxx);
    u_xlat16_2.x = _Color.w * _Saturation;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_0 + u_xlat3.xxxx;
    u_xlat16_1 = glstate_lightmodel_ambient * vec4(4.0, 4.0, 4.0, 4.0) + (-u_xlat16_0);
    u_xlat16_2.x = vs_TEXCOORD2.x * _FadeIntensity;
    u_xlat16_0 = u_xlat16_2.xxxx * u_xlat16_1 + u_xlat16_0;
    u_xlat16_2.xyz = glstate_lightmodel_ambient.xyz * vec3(4.0, 4.0, 4.0);
    u_xlat3.xyz = u_xlat16_0.xyz * u_xlat16_2.xyz + (-unity_FogColor.xyz);
    SV_Target0.w = u_xlat16_0.w;
    u_xlat15 = vs_TEXCOORD1;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat3.xyz + unity_FogColor.xyz;
    SV_Target0.xyz = u_xlat3.xyz;
    return;
}

#endif
"
}
}
}
}
}