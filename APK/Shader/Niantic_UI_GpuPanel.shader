//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "Niantic/UI/GpuPanel" {
Properties {
_MainTex ("Texture", 2D) = "white" { }
_TintColor ("Tint Color", Color) = (1,1,1,1)
_RampAngle ("Ramp Angle", Float) = 0
_RampScale ("Ramp Scale", Float) = 1
_GradientPoints ("Gradient Points", Vector) = (0,0.33,0.66,1)
_GradientColor0 ("Gradient Color 0", Color) = (0,0,0,1)
_GradientColor1 ("Gradient Color 1", Color) = (1,0,0,1)
_GradientColor2 ("Gradient Color 2", Color) = (0,1,0,1)
_GradientColor3 ("Gradient Color 3", Color) = (0,0,1,1)
_ScreenExtents ("Extents of Icon on Screen", Vector) = (0,0,1,1)
_CornerRadius ("Corner Radius In Px", Float) = 16
_Feather ("Feather", Range(0, 0.1)) = 0.025
_BorderColor ("Border Color", Color) = (1,0,1,1)
_BorderOffset ("Border Offset", Float) = 0
_BorderWidth ("Border Width", Float) = 10
_SideBarTopColor ("Sidebar Color", Color) = (1,0,0,1)
_SideBarBottomColor ("Sidebar Color", Color) = (1,1,0,1)
_SideBarOffset ("Sidebar Offset", Float) = 0
_SideBarWidth ("Sidebar Width", Float) = 10
_SideBarRampAngle ("Sidebar Width", Float) = 10
_ShadowColor ("Shadow Color", Color) = (0,0,0,1)
_ShadowCenter ("Shadow Center", Vector) = (0.5,0.5,0,0)
_ShadowWidth ("Shadow Width", Float) = 10
_ShadowFeather ("Shadow Feather", Range(0, 1)) = 0.25
_BottomColor ("Bottom Color", Color) = (1,1,1,1)
_BottomSplit ("Bottom Split", Range(0, 1)) = 0.5
_StencilComp ("Stencil Comparison", Float) = 8
_Stencil ("Stencil ID", Float) = 0
_StencilOp ("Stencil Operation", Float) = 0
_StencilWriteMask ("Stencil Write Mask", Float) = 255
_StencilReadMask ("Stencil Read Mask", Float) = 255
_ColorMask ("Color Mask", Float) = 15
[Toggle(UNITY_UI_ALPHACLIP)] _UseUIAlphaClip ("Use Alpha Clip", Float) = 0
}
SubShader {
 Tags { "CanUseSpriteAtlas" = "true" "IGNOREPROJECTOR" = "true" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "FORWARD"
  Tags { "CanUseSpriteAtlas" = "true" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  Blend SrcAlpha OneMinusSrcAlpha, SrcAlpha OneMinusSrcAlpha
  ColorMask 0 0
  ZTest Off
  ZWrite Off
  Cull Off
  Stencil {
   ReadMask 0
   WriteMask 0
   Comp Disabled
   Pass Keep
   Fail Keep
   ZFail Keep
  }
  GpuProgramID 853
Program "vp" {
SubProgram "gles hw_tier00 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
float u_xlat6;
vec2 u_xlat8;
mediump float u_xlat16_10;
vec2 u_xlat11;
bvec2 u_xlatb11;
float u_xlat12;
float u_xlat16;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_5.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_5.x = u_xlat16_5.x / _CornerRadius;
    u_xlat1.y = u_xlat16_5.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_5.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_5.x + 1.0;
    u_xlat2.x = (-u_xlat16_5.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat11.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat11.xy = (-u_xlat11.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat11.xy = u_xlat11.xy / vs_TEXCOORD0.zw;
    u_xlat12 = dot(u_xlat11.xy, u_xlat11.xy);
    u_xlatb11.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyxy).xy;
    u_xlat11.x = u_xlatb11.x ? float(1.0) : 0.0;
    u_xlat11.y = u_xlatb11.y ? float(1.0) : 0.0;
;
    u_xlat11.x = max(u_xlat11.y, u_xlat11.x);
    u_xlat16 = sqrt(u_xlat12);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat16);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat11.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat6 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat6 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_0.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_0.xy = (-u_xlat16_5.yz) * u_xlat8.xy + u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_10 = (-_Feather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_10) + u_xlat3.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_10)) + u_xlat16_0.xy;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.y, u_xlat3.x);
    u_xlat16_5.x = _Feather + 1.0;
    u_xlat16_5.x = (-u_xlat16_10) + u_xlat16_5.x;
    u_xlat16_5.x = float(1.0) / u_xlat16_5.x;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_4.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10 = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10 = (-u_xlat16_5.x) + u_xlat16_10;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10 + u_xlat16_5.x;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_0.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat16_3.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat0.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_13.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat0.y = 0.0670000017;
    u_xlat16_3.xy = u_xlat16_13.xy * u_xlat0.xy + u_xlat16_3.xy;
    u_xlat16_13.xy = u_xlat0.xy * u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy / u_xlat16_13.xy;
    u_xlat16_3.xy = u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_3.xy = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_13.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_3.xy = vec2(u_xlat16_16) * u_xlat16_3.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xy = min(max(u_xlat16_3.xy, 0.0), 1.0);
#else
    u_xlat16_3.xy = clamp(u_xlat16_3.xy, 0.0, 1.0);
#endif
    u_xlat16_13.xy = u_xlat16_3.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_3.xy = u_xlat16_3.xy * u_xlat16_3.xy;
    u_xlat16_3.xy = (-u_xlat16_13.xy) * u_xlat16_3.xy + vec2(1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_3.y, u_xlat16_3.x);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
mediump vec3 u_xlat16_8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_3.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat5.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_3.xy = (-u_xlat16_3.xy) * u_xlat5.xy + u_xlat16_13.xy;
    u_xlat16_3.xy = (-u_xlat16_3.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_3.xy = u_xlat16_3.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_3.xy, u_xlat16_3.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_4.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_4.yz = (-vec2(u_xlat16_16)) + u_xlat16_3.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_3.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_3.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8.x = _Feather + 1.0;
    u_xlat16_16 = (-u_xlat16_16) + u_xlat16_8.x;
    u_xlat16_16 = float(1.0) / u_xlat16_16;
    u_xlat16_8.xyz = vec3(u_xlat16_16) * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16 = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_16 = (-u_xlat16_8.x) + u_xlat16_16;
    u_xlat16_16 = u_xlat16_3.x * u_xlat16_16 + u_xlat16_8.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_16;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec2 u_xlat16_11;
mediump float u_xlat16_16;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_11.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat5.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat5.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_11.xy) * u_xlat5.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_11.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_11.x);
    u_xlat16_2.yz = (-u_xlat16_11.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_11.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_11.x = (-u_xlat16_6.x) + u_xlat16_11.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_11.x + u_xlat16_6.x;
    u_xlat16_6.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.xy) * u_xlat5.xy + u_xlat16_2.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_16 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_16);
    u_xlat16_2.yz = (-vec2(u_xlat16_16)) + u_xlat16_6.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_11.x = _Feather + 1.0;
    u_xlat16_11.x = (-u_xlat16_16) + u_xlat16_11.x;
    u_xlat16_11.x = float(1.0) / u_xlat16_11.x;
    u_xlat16_2.xyz = u_xlat16_11.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_11.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_11.x = (-u_xlat16_2.x) + u_xlat16_11.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_11.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_6.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_6.x * u_xlat4.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat16_1 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
vec2 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
float u_xlat7;
vec2 u_xlat9;
vec2 u_xlat13;
bvec2 u_xlatb13;
float u_xlat14;
mediump float u_xlat16_18;
float u_xlat19;
void main()
{
    u_xlat16_0.x = _BorderWidth / _CornerRadius;
    u_xlat16_0.x = (-u_xlat16_0.x) + 1.0;
    u_xlat16_6.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_6.x = u_xlat16_6.x / _CornerRadius;
    u_xlat1.y = u_xlat16_6.x + u_xlat16_0.x;
    u_xlat2.y = (-u_xlat16_6.x) + u_xlat16_0.x;
    u_xlat1.x = u_xlat16_6.x + 1.0;
    u_xlat2.x = (-u_xlat16_6.x) + 1.0;
    u_xlat1.xy = u_xlat1.xy + (-u_xlat2.xy);
    u_xlat1.xy = vec2(1.0, 1.0) / u_xlat1.xy;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat13.xy = (-u_xlat13.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat13.xy = u_xlat13.xy / vs_TEXCOORD0.zw;
    u_xlat14 = dot(u_xlat13.xy, u_xlat13.xy);
    u_xlatb13.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat13.xyxy).xy;
    u_xlat13.x = u_xlatb13.x ? float(1.0) : 0.0;
    u_xlat13.y = u_xlatb13.y ? float(1.0) : 0.0;
;
    u_xlat13.x = max(u_xlat13.y, u_xlat13.x);
    u_xlat19 = sqrt(u_xlat14);
    u_xlat2.xy = (-u_xlat2.xy) + vec2(u_xlat19);
    u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.xy = min(max(u_xlat1.xy, 0.0), 1.0);
#else
    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat1.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat1.xy = u_xlat1.xy * u_xlat1.xy;
    u_xlat1.xy = (-u_xlat2.xy) * u_xlat1.xy + vec2(1.0, 1.0);
    u_xlat1.xy = max(u_xlat13.xx, u_xlat1.xy);
    u_xlat1.xy = u_xlat3.xz * u_xlat1.xy;
    u_xlat1.x = u_xlat3.y * u_xlat1.x;
    u_xlat7 = (-u_xlat1.y) * u_xlat3.w + 1.0;
    u_xlat1.x = u_xlat7 * u_xlat1.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat1 = u_xlat1.xxxx * u_xlat3 + u_xlat16_2;
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_0.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat9.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat9.xy + u_xlat16_0.xy;
    u_xlat3.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(u_xlat3.xw);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat3.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_ShadowFeather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_0.xy + (-u_xlat16_4.xx);
    u_xlatb3.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat3.w, u_xlat3.x);
    u_xlat16_6.x = _ShadowFeather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_4.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_6.xy = (-u_xlat16_6.yz) * u_xlat9.xy + u_xlat16_4.xy;
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlatb3.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat16_18 = max(u_xlat3.y, u_xlat3.x);
    u_xlat3.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat3.x = sqrt(u_xlat3.x);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_5.x = u_xlat3.x + (-u_xlat16_4.x);
    u_xlat16_5.yz = u_xlat16_6.xy + (-u_xlat16_4.xx);
    u_xlat16_6.x = _Feather + 1.0;
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = float(1.0) / u_xlat16_6.x;
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_6.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_6.x = (-u_xlat16_4.x) + u_xlat16_6.x;
    u_xlat16_6.x = u_xlat16_18 * u_xlat16_6.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_6.x) + u_xlat16_0.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlatb3.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb3.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat3.xy = u_xlat3.zw * u_xlat3.xy;
    u_xlat3.x = u_xlat3.y * u_xlat3.x;
    u_xlat3.x = u_xlat16_6.x * u_xlat3.x;
    u_xlat16_0 = u_xlat1 * u_xlat3.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec2 u_xlat16_1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_2.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat6.xy + u_xlat16_2.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_2.xyz = u_xlat16_13.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_13.x = (-u_xlat16_2.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat18 = u_xlat0.x * u_xlat16_7.x;
    u_xlat4.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_7.x = float(1.0) / _RampScale;
    u_xlat4.x = u_xlat4.x * u_xlat16_7.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = u_xlat4.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_7.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_7.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_7.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat4.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.yyy * u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_3.xyz = u_xlat4.xxx * u_xlat16_3.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_3.xyz + u_xlat16_2.xyz;
    u_xlat16_0.xyz = vec3(u_xlat18) * u_xlat16_7.xyz;
    u_xlat16_0.w = u_xlat18;
    u_xlat16_0 = _ShadowColor * u_xlat16_1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec3 u_xlat16_8;
vec3 u_xlat11;
mediump vec2 u_xlat16_15;
vec2 u_xlat18;
bvec2 u_xlatb18;
float u_xlat19;
mediump float u_xlat16_22;
float u_xlat25;
void main()
{
    u_xlat0.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat0.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_15.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_15.xy) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat0.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat0.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_15.x = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_15.x);
    u_xlat16_2.yz = (-u_xlat16_15.xx) + u_xlat16_1.xy;
    u_xlatb0.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.w, u_xlat0.x);
    u_xlat16_8.x = _ShadowFeather + 1.0;
    u_xlat16_8.x = (-u_xlat16_15.x) + u_xlat16_8.x;
    u_xlat16_8.x = float(1.0) / u_xlat16_8.x;
    u_xlat16_8.xyz = u_xlat16_8.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_8.xyz = min(max(u_xlat16_8.xyz, 0.0), 1.0);
#else
    u_xlat16_8.xyz = clamp(u_xlat16_8.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_8.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat16_8.xyz;
    u_xlat16_8.xyz = (-u_xlat16_2.xyz) * u_xlat16_8.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_8.z, u_xlat16_8.y);
    u_xlat16_15.x = (-u_xlat16_8.x) + u_xlat16_15.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_15.x + u_xlat16_8.x;
    u_xlat16_8.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_8.xy;
    u_xlat16_22 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_2.x = (-_Feather) + 1.0;
    u_xlat16_3.x = u_xlat0.x + (-u_xlat16_2.x);
    u_xlat16_3.yz = u_xlat16_8.xy + (-u_xlat16_2.xx);
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_15.x = _Feather + 1.0;
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_15.x = float(1.0) / u_xlat16_15.x;
    u_xlat16_2.xyz = u_xlat16_15.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_15.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_15.x = (-u_xlat16_2.x) + u_xlat16_15.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_15.x + u_xlat16_2.x;
    u_xlat16_1.x = (-u_xlat16_8.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_22 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_22) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_22 + 1.0;
    u_xlat5.x = (-u_xlat16_22) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat18.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat18.xy = (-u_xlat18.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat18.xy = u_xlat18.xy / vs_TEXCOORD0.zw;
    u_xlat19 = dot(u_xlat18.xy, u_xlat18.xy);
    u_xlatb18.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat18.xyxy).xy;
    u_xlat18.x = u_xlatb18.x ? float(1.0) : 0.0;
    u_xlat18.y = u_xlatb18.y ? float(1.0) : 0.0;
;
    u_xlat18.x = max(u_xlat18.y, u_xlat18.x);
    u_xlat25 = sqrt(u_xlat19);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat18.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat4.x = u_xlat2.y * u_xlat4.x;
    u_xlat11.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat4.x = u_xlat11.x * u_xlat4.x;
    u_xlat11.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat11.x = u_xlat11.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat11.xyz = u_xlat11.xxx + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat11.xyz = u_xlat11.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_1.w = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat11.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xzw = u_xlat16_1.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat11.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat11.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat11.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xzw = u_xlat16_1.www * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat2.xyz = (-u_xlat16_1.xzw);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat4.xxx * u_xlat2.xyz + u_xlat16_1.xzw;
    u_xlat3.w = u_xlat4.x * u_xlat2.w + 1.0;
    u_xlatb4.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb4.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
    u_xlat4.z = u_xlatb4.z ? float(1.0) : 0.0;
    u_xlat4.w = u_xlatb4.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = u_xlat4.zw * u_xlat4.xy;
    u_xlat4.x = u_xlat4.y * u_xlat4.x;
    u_xlat4.x = u_xlat16_8.x * u_xlat4.x;
    u_xlat16_0 = u_xlat3 * u_xlat4.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec4 u_xlat5;
bvec4 u_xlatb5;
mediump vec3 u_xlat16_7;
vec2 u_xlat8;
mediump vec2 u_xlat16_13;
mediump float u_xlat16_19;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat0.xyz = u_xlat0.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat0.xyz = u_xlat0.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat0.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_1.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat0.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_3.xyz + u_xlat16_1.xyw;
    u_xlat0.xyz = u_xlat16_1.xyz + (-_BottomColor.xyz);
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb2.x = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat2.x = u_xlatb2.x ? 1.0 : float(0.0);
    u_xlat0.w = (-_BottomColor.w) + 1.0;
    u_xlat0 = u_xlat2.xxxx * u_xlat0 + _BottomColor;
    u_xlat2.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_1.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_13.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat8.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat8.y = 0.0670000017;
    u_xlat16_1.xy = (-u_xlat16_13.xy) * u_xlat8.xy + u_xlat16_1.xy;
    u_xlat2.xw = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(u_xlat2.xw);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_13.x = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_13.x) + u_xlat2.x;
    u_xlat16_3.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb2.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xxxy).xw;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat2.w, u_xlat2.x);
    u_xlat16_7.x = _ShadowFeather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_3.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlat16_7.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_3.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_7.xy = (-u_xlat16_7.xy) * u_xlat8.xy + u_xlat16_3.xy;
    u_xlat16_7.xy = (-u_xlat16_7.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_7.xy = u_xlat16_7.xy / vs_TEXCOORD0.zw;
    u_xlat2.x = dot(u_xlat16_7.xy, u_xlat16_7.xy);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_19) + u_xlat2.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_19)) + u_xlat16_7.xy;
    u_xlatb2.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_7.xyxx).xy;
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
;
    u_xlat16_7.x = max(u_xlat2.y, u_xlat2.x);
    u_xlat16_13.x = _Feather + 1.0;
    u_xlat16_13.x = (-u_xlat16_19) + u_xlat16_13.x;
    u_xlat16_13.x = float(1.0) / u_xlat16_13.x;
    u_xlat16_3.xyz = u_xlat16_13.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-u_xlat16_4.xyz) * u_xlat16_3.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_3.z, u_xlat16_3.y);
    u_xlat16_13.x = (-u_xlat16_3.x) + u_xlat16_13.x;
    u_xlat16_7.x = u_xlat16_7.x * u_xlat16_13.x + u_xlat16_3.x;
    u_xlat16_1.x = (-u_xlat16_7.x) + u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_1.x = min(max(u_xlat16_1.x, 0.0), 1.0);
#else
    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_1.xxxx * _ShadowColor;
    u_xlatb5.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb5.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat5.x = u_xlatb5.x ? float(1.0) : 0.0;
    u_xlat5.y = u_xlatb5.y ? float(1.0) : 0.0;
    u_xlat5.z = u_xlatb5.z ? float(1.0) : 0.0;
    u_xlat5.w = u_xlatb5.w ? float(1.0) : 0.0;
;
    u_xlat5.xy = u_xlat5.zw * u_xlat5.xy;
    u_xlat5.x = u_xlat5.y * u_xlat5.x;
    u_xlat5.x = u_xlat16_7.x * u_xlat5.x;
    u_xlat16_0 = u_xlat0 * u_xlat5.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb3 = u_xlat16_2<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb3 = u_xlat16_2<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb3 = u_xlat16_2<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2<0.0);
#else
    u_xlatb3 = u_xlat16_2<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2<0.0);
#else
    u_xlatb3 = u_xlat16_2<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump float u_xlat16_2;
bool u_xlatb3;
mediump vec2 u_xlat16_4;
mediump float u_xlat16_6;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_4.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_4.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_4.xy = u_xlat16_4.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_4.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_4.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_4.xx) + u_xlat16_0.xy;
    u_xlat16_6 = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_4.x) + u_xlat16_6;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_0.xy = u_xlat16_4.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_4.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_4.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_2 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_2<0.0);
#else
    u_xlatb3 = u_xlat16_2<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_0.xyz = vs_COLOR0.xyz;
    u_xlat16_0.w = 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat16_1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb6 = u_xlat16_7<0.0;
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb6 = u_xlat16_7<0.0;
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb6 = u_xlat16_7<0.0;
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_7<0.0);
#else
    u_xlatb6 = u_xlat16_7<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_7<0.0);
#else
    u_xlatb6 = u_xlat16_7<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
vec2 u_xlat6;
bool u_xlatb6;
mediump float u_xlat16_7;
vec2 u_xlat10;
float u_xlat12;
mediump float u_xlat16_13;
float u_xlat18;
mediump float u_xlat16_19;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat6.xy + u_xlat16_1.xy;
    u_xlat16_13 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_19 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_19);
    u_xlat16_2.yz = (-vec2(u_xlat16_19)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7 = _Feather + 1.0;
    u_xlat16_7 = (-u_xlat16_19) + u_xlat16_7;
    u_xlat16_7 = float(1.0) / u_xlat16_7;
    u_xlat16_2.xyz = vec3(u_xlat16_7) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_7 = (-u_xlat16_2.x) + u_xlat16_7;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_7<0.0);
#else
    u_xlatb6 = u_xlat16_7<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_13 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_13) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_13 + 1.0;
    u_xlat5.x = (-u_xlat16_13) + 1.0;
    u_xlat6.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat6.xy = vec2(1.0, 1.0) / u_xlat6.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat18 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat18 = sqrt(u_xlat18);
    u_xlat10.xy = (-u_xlat5.xy) + vec2(u_xlat18);
    u_xlat6.xy = u_xlat6.xy * u_xlat10.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.xy = min(max(u_xlat6.xy, 0.0), 1.0);
#else
    u_xlat6.xy = clamp(u_xlat6.xy, 0.0, 1.0);
#endif
    u_xlat10.xy = u_xlat6.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat6.xy;
    u_xlat6.xy = (-u_xlat10.xy) * u_xlat6.xy + vec2(1.0, 1.0);
    u_xlat6.xy = max(u_xlat4.xx, u_xlat6.xy);
    u_xlat6.xy = u_xlat1.xz * u_xlat6.xy;
    u_xlat6.x = u_xlat1.y * u_xlat6.x;
    u_xlat12 = (-u_xlat6.y) * u_xlat1.w + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat2 = (-u_xlat16_1) + _BorderColor;
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_4.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec2 u_xlat3;
bool u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec2 u_xlat16_7;
void main()
{
    u_xlat3.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat3.y = 0.0670000017;
    u_xlat16_7.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat3.xy + u_xlat16_7.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_7.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_7.x);
    u_xlat16_2.yz = (-u_xlat16_7.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_4.x = _Feather + 1.0;
    u_xlat16_4.x = (-u_xlat16_7.x) + u_xlat16_4.x;
    u_xlat16_4.x = float(1.0) / u_xlat16_4.x;
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_2.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_7.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_7.x = (-u_xlat16_4.x) + u_xlat16_7.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_7.x + u_xlat16_4.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_4.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_4.x<0.0);
#else
    u_xlatb3 = u_xlat16_4.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat16_1.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(vs_TEXCOORD0.y>=u_xlat16_1.x);
#else
    u_xlatb3 = vs_TEXCOORD0.y>=u_xlat16_1.x;
#endif
    u_xlat3.x = u_xlatb3 ? 1.0 : float(0.0);
    u_xlat16_1.xyz = vs_COLOR0.xyz;
    u_xlat16_1.w = 1.0;
    u_xlat1 = u_xlat16_1 + (-_BottomColor);
    u_xlat1 = u_xlat3.xxxx * u_xlat1 + _BottomColor;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat1;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb2 = u_xlat16_6<0.0;
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb2 = u_xlat16_6<0.0;
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb2 = u_xlat16_6<0.0;
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<0.0);
#else
    u_xlatb2 = u_xlat16_6<0.0;
#endif
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<0.0);
#else
    u_xlatb2 = u_xlat16_6<0.0;
#endif
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bvec4 u_xlatb1;
vec3 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump float u_xlat16_6;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_12.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_12.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_12.xy = u_xlat16_12.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_12.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_12.x = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_0.xy = u_xlat16_12.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_12.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_12.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_6 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat16_6<0.0);
#else
    u_xlatb2 = u_xlat16_6<0.0;
#endif
    if(u_xlatb2){discard;}
    u_xlat2.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat2.x = u_xlat2.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat2.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat2.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat2.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_0.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat2.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat2.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_4.xyz + u_xlat16_0.xyw;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_0.xyz;
    u_xlat16_1 = u_xlat1.x;
    SV_Target0.w = u_xlat16_1 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb6 = u_xlat16_5<0.0;
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb6 = u_xlat16_5<0.0;
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb6 = u_xlat16_5<0.0;
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_5<0.0);
#else
    u_xlatb6 = u_xlat16_5<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_5<0.0);
#else
    u_xlatb6 = u_xlat16_5<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(0.0, 0.0);
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump float u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
mediump vec2 u_xlat16_10;
float u_xlat11;
mediump float u_xlat16_15;
void main()
{
    u_xlat16_0.xy = abs(vs_TEXCOORD0.xy) + vec2(-0.5, -0.5);
    u_xlat1.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_10.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat1.y = 0.0670000017;
    u_xlat16_0.xy = u_xlat16_10.xy * u_xlat1.xy + u_xlat16_0.xy;
    u_xlat16_10.xy = u_xlat16_10.xy * u_xlat1.xy;
    u_xlat16_0.xy = u_xlat16_0.xy / u_xlat16_10.xy;
    u_xlat16_0.xy = u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_0.xy = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_10.x = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_0.xy = u_xlat16_10.xx * u_xlat16_0.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xy = min(max(u_xlat16_0.xy, 0.0), 1.0);
#else
    u_xlat16_0.xy = clamp(u_xlat16_0.xy, 0.0, 1.0);
#endif
    u_xlat16_10.xy = u_xlat16_0.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat16_0.xy = u_xlat16_0.xy * u_xlat16_0.xy;
    u_xlat16_0.xy = (-u_xlat16_10.xy) * u_xlat16_0.xy + vec2(1.0, 1.0);
    u_xlat16_0.x = min(u_xlat16_0.y, u_xlat16_0.x);
    u_xlatb1.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb1.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat1.xy = u_xlat1.zw * u_xlat1.xy;
    u_xlat1.x = u_xlat1.y * u_xlat1.x;
    u_xlat16_5 = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat16_5<0.0);
#else
    u_xlatb6 = u_xlat16_5<0.0;
#endif
    if(u_xlatb6){discard;}
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_0.x = float(1.0) / _RampScale;
    u_xlat6.x = u_xlat6.x * u_xlat16_0.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = u_xlat6.xxx + (-_GradientPoints.xyz);
    u_xlat2.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat6.xyz = u_xlat6.xyz / u_xlat2.xyz;
    u_xlatb2.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_0.x = (u_xlatb2.x) ? float(1.0) : float(0.0);
    u_xlat16_0.y = (u_xlatb2.y) ? float(1.0) : float(0.0);
    u_xlat16_0.z = (u_xlatb2.z) ? float(1.0) : float(0.0);
    u_xlatb2.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat6.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb2.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb2.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb2.z) ? float(-1.0) : float(-0.0);
    u_xlat16_0.xyz = u_xlat16_0.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat6.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_0.yyy * u_xlat16_3.xyz;
    u_xlat16_4.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyw = u_xlat16_0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat6.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_0.zzz * u_xlat16_3.xyz + u_xlat16_0.xyw;
    u_xlat2.xyz = (-u_xlat16_0.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlatb3 = greaterThanEqual(u_xlat3, abs(vs_TEXCOORD0.xyxy));
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
    u_xlat3.z = u_xlatb3.z ? float(1.0) : 0.0;
    u_xlat3.w = u_xlatb3.w ? float(1.0) : 0.0;
;
    u_xlat6.x = u_xlat3.y * u_xlat3.x;
    u_xlat11 = (-u_xlat3.z) * u_xlat3.w + 1.0;
    u_xlat6.x = u_xlat11 * u_xlat6.x;
    u_xlat0.xyz = u_xlat6.xxx * u_xlat2.xyz + u_xlat16_0.xyz;
    u_xlat0.w = u_xlat6.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat1.xxxx * u_xlat0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_7.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_7.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb3 = u_xlat16_7.x<0.0;
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb3 = u_xlat16_7.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb3 = u_xlat16_7.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
bvec4 u_xlatb0;
mediump vec4 u_xlat16_1;
mediump vec3 u_xlat16_2;
vec3 u_xlat3;
bool u_xlatb3;
vec3 u_xlat4;
bvec3 u_xlatb4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_13;
void main()
{
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_1.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat6.y = 0.0670000017;
    u_xlat16_13.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_1.xy = (-u_xlat16_1.xy) * u_xlat6.xy + u_xlat16_13.xy;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_13.x = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_13.x);
    u_xlat16_2.yz = (-u_xlat16_13.xx) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_7.x = _Feather + 1.0;
    u_xlat16_7.x = (-u_xlat16_13.x) + u_xlat16_7.x;
    u_xlat16_7.x = float(1.0) / u_xlat16_7.x;
    u_xlat16_7.xyz = u_xlat16_7.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_7.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_7.xyz;
    u_xlat16_7.xyz = (-u_xlat16_2.xyz) * u_xlat16_7.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_13.x = min(u_xlat16_7.z, u_xlat16_7.y);
    u_xlat16_13.x = (-u_xlat16_7.x) + u_xlat16_13.x;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_13.x + u_xlat16_7.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_7.x = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb3 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb3 = u_xlat16_7.x<0.0;
#endif
    if(u_xlatb3){discard;}
    u_xlat3.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_1.x = float(1.0) / _RampScale;
    u_xlat3.x = u_xlat3.x * u_xlat16_1.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = u_xlat3.xxx + (-_GradientPoints.xyz);
    u_xlat4.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat3.xyz = u_xlat3.xyz / u_xlat4.xyz;
    u_xlatb4.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_1.x = (u_xlatb4.x) ? float(1.0) : float(0.0);
    u_xlat16_1.y = (u_xlatb4.y) ? float(1.0) : float(0.0);
    u_xlat16_1.z = (u_xlatb4.z) ? float(1.0) : float(0.0);
    u_xlatb4.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat3.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);
    u_xlat16_2.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);
    u_xlat16_2.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);
    u_xlat16_1.xyz = u_xlat16_1.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_2.xyz = u_xlat3.yyy * u_xlat16_2.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_1.yyy * u_xlat16_2.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat3.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyw = u_xlat16_1.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_2.xyz = u_xlat3.zzz * u_xlat16_2.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_1.zzz * u_xlat16_2.xyz + u_xlat16_1.xyw;
    SV_Target0.xyz = u_xlat0.xxx * u_xlat16_1.xyz;
    u_xlat16_0 = u_xlat0.x;
    SV_Target0.w = u_xlat16_0 * vs_COLOR0.w;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb7 = u_xlat16_8<0.0;
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb7 = u_xlat16_8<0.0;
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
    u_xlatb7 = u_xlat16_8<0.0;
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_8<0.0);
#else
    u_xlatb7 = u_xlat16_8<0.0;
#endif
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_8<0.0);
#else
    u_xlatb7 = u_xlat16_8<0.0;
#endif
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(0.0, 0.0);
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
bvec4 u_xlatb0;
vec4 u_xlat1;
mediump vec2 u_xlat16_1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
bool u_xlatb7;
mediump float u_xlat16_8;
vec2 u_xlat11;
float u_xlat14;
mediump float u_xlat16_15;
float u_xlat21;
mediump float u_xlat16_22;
void main()
{
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_1.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat16_1.xy = (-u_xlat16_2.yz) * u_xlat7.xy + u_xlat16_1.xy;
    u_xlat16_15 = u_xlat16_2.x / _CornerRadius;
    u_xlat16_1.xy = (-u_xlat16_1.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_1.xy = u_xlat16_1.xy / vs_TEXCOORD0.zw;
    u_xlat0.x = dot(u_xlat16_1.xy, u_xlat16_1.xy);
    u_xlat0.x = sqrt(u_xlat0.x);
    u_xlat16_22 = (-_Feather) + 1.0;
    u_xlat16_2.x = u_xlat0.x + (-u_xlat16_22);
    u_xlat16_2.yz = (-vec2(u_xlat16_22)) + u_xlat16_1.xy;
    u_xlatb0.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_1.xyxx).xy;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
;
    u_xlat16_1.x = max(u_xlat0.y, u_xlat0.x);
    u_xlat16_8 = _Feather + 1.0;
    u_xlat16_8 = (-u_xlat16_22) + u_xlat16_8;
    u_xlat16_8 = float(1.0) / u_xlat16_8;
    u_xlat16_2.xyz = vec3(u_xlat16_8) * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_3.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_8 = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_8 = (-u_xlat16_2.x) + u_xlat16_8;
    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_8 + u_xlat16_2.x;
    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;
    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;
    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;
    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;
    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;
    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;
;
    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;
    u_xlat0.x = u_xlat0.y * u_xlat0.x;
    u_xlat16_8 = u_xlat16_1.x * u_xlat0.x + -0.00100000005;
    u_xlat0.x = u_xlat0.x * u_xlat16_1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat16_8<0.0);
#else
    u_xlatb7 = u_xlat16_8<0.0;
#endif
    if(u_xlatb7){discard;}
    u_xlat16_1.x = _BorderWidth / _CornerRadius;
    u_xlat16_1.x = (-u_xlat16_1.x) + 1.0;
    u_xlat4.y = u_xlat16_15 + u_xlat16_1.x;
    u_xlat5.y = (-u_xlat16_15) + u_xlat16_1.x;
    u_xlat4.x = u_xlat16_15 + 1.0;
    u_xlat5.x = (-u_xlat16_15) + 1.0;
    u_xlat7.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat7.xy = vec2(1.0, 1.0) / u_xlat7.xy;
    u_xlat1 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat1.xy + (-vs_TEXCOORD0.zw);
    u_xlatb1 = greaterThanEqual(u_xlat1, abs(vs_TEXCOORD0.xyxy));
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
    u_xlat1.z = u_xlatb1.z ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat21 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat21 = sqrt(u_xlat21);
    u_xlat11.xy = (-u_xlat5.xy) + vec2(u_xlat21);
    u_xlat7.xy = u_xlat7.xy * u_xlat11.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.xy = min(max(u_xlat7.xy, 0.0), 1.0);
#else
    u_xlat7.xy = clamp(u_xlat7.xy, 0.0, 1.0);
#endif
    u_xlat11.xy = u_xlat7.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat7.xy;
    u_xlat7.xy = (-u_xlat11.xy) * u_xlat7.xy + vec2(1.0, 1.0);
    u_xlat7.xy = max(u_xlat4.xx, u_xlat7.xy);
    u_xlat7.xy = u_xlat1.xz * u_xlat7.xy;
    u_xlat7.x = u_xlat1.y * u_xlat7.x;
    u_xlat14 = (-u_xlat7.y) * u_xlat1.w + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat7.x;
    u_xlat14 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat14 = u_xlat14 * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat14) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_3.xyz = u_xlat4.yyy * u_xlat16_3.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_2.yyy * u_xlat16_3.xyz;
    u_xlat16_6.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_6.xyz = u_xlat4.xxx * u_xlat16_6.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_3.xyz = u_xlat4.zzz * u_xlat16_3.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.xyz = min(max(u_xlat16_3.xyz, 0.0), 1.0);
#else
    u_xlat16_3.xyz = clamp(u_xlat16_3.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_3.xyz + u_xlat16_2.xyw;
    u_xlat1.xyz = (-u_xlat16_2.xyz);
    u_xlat1.w = -1.0;
    u_xlat1 = u_xlat1 + _BorderColor;
    u_xlat2.xyz = u_xlat7.xxx * u_xlat1.xyz + u_xlat16_2.xyz;
    u_xlat2.w = u_xlat7.x * u_xlat1.w + 1.0;
    u_xlat16_0 = u_xlat0.xxxx * u_xlat2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb16 = u_xlat16_5.x<0.0;
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb16 = u_xlat16_5.x<0.0;
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb16 = u_xlat16_5.x<0.0;
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb16 = u_xlat16_5.x<0.0;
#endif
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb16 = u_xlat16_5.x<0.0;
#endif
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec2 u_xlat3;
bvec2 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bvec2 u_xlatb6;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_15;
bool u_xlatb16;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_10.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat6.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat6.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat6.xy + u_xlat16_10.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_10.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_10.x) + u_xlat1.x;
    u_xlat16_15 = _Feather + 1.0;
    u_xlat16_15 = (-u_xlat16_10.x) + u_xlat16_15;
    u_xlat16_2.yz = (-u_xlat16_10.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_5.x = float(1.0) / u_xlat16_15;
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_5.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) * u_xlat16_5.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_5.z, u_xlat16_5.y);
    u_xlat16_10.x = (-u_xlat16_5.x) + u_xlat16_10.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_10.x + u_xlat16_5.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_5.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb16 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb16 = u_xlat16_5.x<0.0;
#endif
    if(u_xlatb16){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_5.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_5.xy = (-u_xlat16_2.xy) * u_xlat6.xy + u_xlat16_5.xy;
    u_xlat6.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_5.xy = (-u_xlat16_5.xy) + abs(u_xlat6.xy);
    u_xlat16_5.xy = u_xlat16_5.xy / vs_TEXCOORD0.zw;
    u_xlat6.x = dot(u_xlat16_5.xy, u_xlat16_5.xy);
    u_xlat6.x = sqrt(u_xlat6.x);
    u_xlat16_15 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_15) + u_xlat6.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_15)) + u_xlat16_5.xy;
    u_xlatb6.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_5.xyxx).xy;
    u_xlat6.x = u_xlatb6.x ? float(1.0) : 0.0;
    u_xlat6.y = u_xlatb6.y ? float(1.0) : 0.0;
;
    u_xlat16_5.x = max(u_xlat6.y, u_xlat6.x);
    u_xlat16_10.x = _ShadowFeather + 1.0;
    u_xlat16_10.x = (-u_xlat16_15) + u_xlat16_10.x;
    u_xlat16_10.x = float(1.0) / u_xlat16_10.x;
    u_xlat16_2.xyz = u_xlat16_10.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_10.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_10.x = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_10.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat16_0 = u_xlat16_2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
bvec2 u_xlatb4;
vec2 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
mediump vec2 u_xlat16_16;
vec2 u_xlat20;
bvec2 u_xlatb20;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat16_8.x = _BorderWidth / _CornerRadius;
    u_xlat16_8.x = (-u_xlat16_8.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_8.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_8.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat4.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat4.xy = vec2(1.0, 1.0) / u_xlat4.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat20.xy = (-u_xlat20.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat20.xy = u_xlat20.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat20.xy, u_xlat20.xy);
    u_xlatb20.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat20.xyxy).xy;
    u_xlat20.x = u_xlatb20.x ? float(1.0) : 0.0;
    u_xlat20.y = u_xlatb20.y ? float(1.0) : 0.0;
;
    u_xlat20.x = max(u_xlat20.y, u_xlat20.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat5.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat4.xy = u_xlat4.xy * u_xlat5.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.xy = min(max(u_xlat4.xy, 0.0), 1.0);
#else
    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);
#endif
    u_xlat5.xy = u_xlat4.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat4.xy = u_xlat4.xy * u_xlat4.xy;
    u_xlat4.xy = (-u_xlat5.xy) * u_xlat4.xy + vec2(1.0, 1.0);
    u_xlat4.xy = max(u_xlat20.xx, u_xlat4.xy);
    u_xlat4.xy = u_xlat2.xz * u_xlat4.xy;
    u_xlat25 = u_xlat2.y * u_xlat4.x;
    u_xlat4.x = (-u_xlat4.y) * u_xlat2.w + 1.0;
    u_xlat25 = u_xlat25 * u_xlat4.x;
    u_xlat16_2.xyz = vs_COLOR0.xyz;
    u_xlat16_2.w = 1.0;
    u_xlat3 = (-u_xlat16_2) + _BorderColor;
    u_xlat2 = vec4(u_xlat25) * u_xlat3 + u_xlat16_2;
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_6.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_6.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_6.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_6.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_6.xyz = u_xlat16_16.xxx * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_16.x = (-u_xlat16_6.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_6.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
    u_xlatb1.x = u_xlat16_6.x<0.0;
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
    u_xlatb1.x = u_xlat16_6.x<0.0;
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
    u_xlatb1.x = u_xlat16_6.x<0.0;
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb1.x = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb1.x = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec2 u_xlat7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
float u_xlat20;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat20 = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb1.x = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb1.x){discard;}
    u_xlat1.xw = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat1.xw + (-vs_TEXCOORD0.zw);
    u_xlat16_4.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_4.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat1.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat1.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_4.x = (-u_xlat16_18) + u_xlat1.x;
    u_xlat16_4.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb1.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.y = u_xlatb1.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat1.y, u_xlat1.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_4.xyz = u_xlat16_12.xxx * u_xlat16_4.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = u_xlat16_4.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-u_xlat16_5.xyz) * u_xlat16_4.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_4.z, u_xlat16_4.y);
    u_xlat16_12.x = (-u_xlat16_4.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_4.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_6.x = float(1.0) / _RampScale;
    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.xyz = u_xlat1.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat1.xyz = u_xlat1.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_6.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_6.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat1.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat1.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat1.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_6.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_5.xyz = u_xlat1.zzz * u_xlat16_5.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_2.xyz = vec3(u_xlat20) * u_xlat16_6.xyz;
    u_xlat16_2.w = u_xlat20;
    u_xlat16_0 = _ShadowColor * u_xlat16_0.xxxx + u_xlat16_2;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb25 = u_xlat16_8.x<0.0;
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BORDER" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump float _BorderWidth;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	mediump vec4 _BorderColor;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
bvec2 u_xlatb4;
vec3 u_xlat5;
bvec3 u_xlatb5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec2 u_xlat16_8;
vec2 u_xlat9;
bvec2 u_xlatb9;
mediump vec3 u_xlat16_10;
vec2 u_xlat12;
mediump vec2 u_xlat16_16;
float u_xlat17;
mediump float u_xlat16_24;
float u_xlat25;
bool u_xlatb25;
void main()
{
    u_xlat16_0.x = _Feather + 1.0;
    u_xlat16_8.x = (-_Feather) + 1.0;
    u_xlat16_0.x = (-u_xlat16_8.x) + u_xlat16_0.x;
    u_xlat16_0.x = float(1.0) / u_xlat16_0.x;
    u_xlat16_16.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat9.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat16_2.xyz = vec3(_Feather) * vec3(10.0, 0.0670000017, 1.0);
    u_xlat9.y = 0.0670000017;
    u_xlat16_16.xy = (-u_xlat16_2.yz) * u_xlat9.xy + u_xlat16_16.xy;
    u_xlat16_2.x = u_xlat16_2.x / _CornerRadius;
    u_xlat16_16.xy = (-u_xlat16_16.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_16.xy = u_xlat16_16.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_16.xy, u_xlat16_16.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_3.x = (-u_xlat16_8.x) + u_xlat1.x;
    u_xlat16_3.yz = (-u_xlat16_8.xx) + u_xlat16_16.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_16.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_0.xzw = u_xlat16_0.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.xzw = min(max(u_xlat16_0.xzw, 0.0), 1.0);
#else
    u_xlat16_0.xzw = clamp(u_xlat16_0.xzw, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = u_xlat16_0.xzw * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_0.xzw = u_xlat16_0.xzw * u_xlat16_0.xzw;
    u_xlat16_0.xzw = (-u_xlat16_10.xyz) * u_xlat16_0.xzw + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_0.w, u_xlat16_0.z);
    u_xlat16_16.x = (-u_xlat16_0.x) + u_xlat16_16.x;
    u_xlat16_0.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_0.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb4.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat4.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_8.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb25 = !!(u_xlat16_8.x<0.0);
#else
    u_xlatb25 = u_xlat16_8.x<0.0;
#endif
    if(u_xlatb25){discard;}
    u_xlat4.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_8.xy = u_xlat4.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_10.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_8.xy = (-u_xlat16_10.xy) * u_xlat9.xy + u_xlat16_8.xy;
    u_xlat9.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_8.xy = (-u_xlat16_8.xy) + abs(u_xlat9.xy);
    u_xlat16_8.xy = u_xlat16_8.xy / vs_TEXCOORD0.zw;
    u_xlat9.x = dot(u_xlat16_8.xy, u_xlat16_8.xy);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat16_24 = (-_ShadowFeather) + 1.0;
    u_xlat16_3.x = (-u_xlat16_24) + u_xlat9.x;
    u_xlat16_3.yz = (-vec2(u_xlat16_24)) + u_xlat16_8.xy;
    u_xlatb9.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_8.xyxx).xy;
    u_xlat9.x = u_xlatb9.x ? float(1.0) : 0.0;
    u_xlat9.y = u_xlatb9.y ? float(1.0) : 0.0;
;
    u_xlat16_8.x = max(u_xlat9.y, u_xlat9.x);
    u_xlat16_16.x = _ShadowFeather + 1.0;
    u_xlat16_16.x = (-u_xlat16_24) + u_xlat16_16.x;
    u_xlat16_16.x = float(1.0) / u_xlat16_16.x;
    u_xlat16_10.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.xyz = min(max(u_xlat16_10.xyz, 0.0), 1.0);
#else
    u_xlat16_10.xyz = clamp(u_xlat16_10.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_10.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * u_xlat16_10.xyz;
    u_xlat16_10.xyz = (-u_xlat16_3.xyz) * u_xlat16_10.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_16.x = min(u_xlat16_10.z, u_xlat16_10.y);
    u_xlat16_16.x = (-u_xlat16_10.x) + u_xlat16_16.x;
    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_16.x + u_xlat16_10.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_8.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat16_10.x = _BorderWidth / _CornerRadius;
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat4.y = u_xlat16_2.x + u_xlat16_10.x;
    u_xlat5.y = (-u_xlat16_2.x) + u_xlat16_10.x;
    u_xlat4.x = u_xlat16_2.x + 1.0;
    u_xlat5.x = (-u_xlat16_2.x) + 1.0;
    u_xlat9.xy = u_xlat4.xy + (-u_xlat5.xy);
    u_xlat9.xy = vec2(1.0, 1.0) / u_xlat9.xy;
    u_xlat2 = (-vs_TEXCOORD2.xzyw) + vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat4.xy = u_xlat2.xy + (-vs_TEXCOORD0.zw);
    u_xlatb2 = greaterThanEqual(u_xlat2, abs(vs_TEXCOORD0.xyxy));
    u_xlat2.x = u_xlatb2.x ? float(1.0) : 0.0;
    u_xlat2.y = u_xlatb2.y ? float(1.0) : 0.0;
    u_xlat2.z = u_xlatb2.z ? float(1.0) : 0.0;
    u_xlat2.w = u_xlatb2.w ? float(1.0) : 0.0;
;
    u_xlat4.xy = (-u_xlat4.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat4.xy = u_xlat4.xy / vs_TEXCOORD0.zw;
    u_xlat25 = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlatb4.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyxx).xy;
    u_xlat4.x = u_xlatb4.x ? float(1.0) : 0.0;
    u_xlat4.y = u_xlatb4.y ? float(1.0) : 0.0;
;
    u_xlat4.x = max(u_xlat4.y, u_xlat4.x);
    u_xlat25 = sqrt(u_xlat25);
    u_xlat12.xy = (-u_xlat5.xy) + vec2(u_xlat25);
    u_xlat9.xy = u_xlat9.xy * u_xlat12.xy;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat12.xy = u_xlat9.xy * vec2(-2.0, -2.0) + vec2(3.0, 3.0);
    u_xlat9.xy = u_xlat9.xy * u_xlat9.xy;
    u_xlat9.xy = (-u_xlat12.xy) * u_xlat9.xy + vec2(1.0, 1.0);
    u_xlat9.xy = max(u_xlat4.xx, u_xlat9.xy);
    u_xlat9.xy = u_xlat2.xz * u_xlat9.xy;
    u_xlat9.x = u_xlat2.y * u_xlat9.x;
    u_xlat17 = (-u_xlat9.y) * u_xlat2.w + 1.0;
    u_xlat9.x = u_xlat17 * u_xlat9.x;
    u_xlat17 = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_3.x = float(1.0) / _RampScale;
    u_xlat17 = u_xlat17 * u_xlat16_3.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat17 = min(max(u_xlat17, 0.0), 1.0);
#else
    u_xlat17 = clamp(u_xlat17, 0.0, 1.0);
#endif
    u_xlat4.xyz = vec3(u_xlat17) + (-_GradientPoints.xyz);
    u_xlat5.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat5.xyz;
    u_xlatb5.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_3.x = (u_xlatb5.x) ? float(1.0) : float(0.0);
    u_xlat16_3.y = (u_xlatb5.y) ? float(1.0) : float(0.0);
    u_xlat16_3.z = (u_xlatb5.z) ? float(1.0) : float(0.0);
    u_xlatb5.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat4.xyzx).xyz;
    u_xlat16_6.x = (u_xlatb5.x) ? float(-1.0) : float(-0.0);
    u_xlat16_6.y = (u_xlatb5.y) ? float(-1.0) : float(-0.0);
    u_xlat16_6.z = (u_xlatb5.z) ? float(-1.0) : float(-0.0);
    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_6.xyz = u_xlat4.yyy * u_xlat16_6.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = u_xlat16_3.yyy * u_xlat16_6.xyz;
    u_xlat16_7.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_7.xyz = u_xlat4.xxx * u_xlat16_7.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_6.xyz = u_xlat4.zzz * u_xlat16_6.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat2.xyz = (-u_xlat16_3.xyz);
    u_xlat2.w = -1.0;
    u_xlat2 = u_xlat2 + _BorderColor;
    u_xlat3.xyz = u_xlat9.xxx * u_xlat2.xyz + u_xlat16_3.xyz;
    u_xlat3.w = u_xlat9.x * u_xlat2.w + 1.0;
    u_xlat16_0 = u_xlat3 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb19 = u_xlat16_6.x<0.0;
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb19 = u_xlat16_6.x<0.0;
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 100

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
attribute highp vec4 in_POSITION0;
attribute mediump vec4 in_COLOR0;
attribute highp vec2 in_TEXCOORD0;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD2;
varying highp vec4 vs_TEXCOORD3;
varying highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 100

#ifdef GL_FRAGMENT_PRECISION_HIGH
    precision highp float;
#else
    precision mediump float;
#endif
precision highp int;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
varying mediump vec4 vs_COLOR0;
varying highp vec4 vs_TEXCOORD0;
varying highp vec4 vs_TEXCOORD1;
varying highp vec4 vs_TEXCOORD3;
#define SV_Target0 gl_FragData[0]
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
    u_xlatb19 = u_xlat16_6.x<0.0;
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier00 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb19 = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7.x = !!(vs_TEXCOORD0.y>=u_xlat16_4.x);
#else
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
#endif
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier01 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb19 = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7.x = !!(vs_TEXCOORD0.y>=u_xlat16_4.x);
#else
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
#endif
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
SubProgram "gles3 hw_tier02 " {
Keywords { "SHOW_BOTTOM" "SHOW_CORNER" "SHOW_GRADIENT" "SHOW_SHADOW" }
Local Keywords { "UNITY_UI_ALPHACLIP" }
"#ifdef VERTEX
#version 300 es

#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _CornerRadius;
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampAngle;
uniform 	mediump float _BorderOffset;
uniform 	mediump float _BorderWidth;
uniform 	mediump float _SideBarOffset;
uniform 	mediump float _SideBarWidth;
uniform 	mediump float _SideBarRampAngle;
uniform 	mediump float _ShadowWidth;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
in highp vec2 in_TEXCOORD0;
out mediump vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec2 u_xlat16_2;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy + vec2(-0.5, -0.5);
    vs_TEXCOORD0.zw = vec2(_CornerRadius) / _ScreenExtents.zw;
    vs_TEXCOORD1 = in_POSITION0;
    u_xlat16_0.yw = vec2(_BorderWidth, _BorderWidth) + vec2(_BorderOffset, _BorderOffset);
    u_xlat16_0.xz = vec2(vec2(vec2(_BorderOffset, _BorderOffset)));
    vs_TEXCOORD2 = u_xlat16_0 / _ScreenExtents.zzww;
    vs_TEXCOORD3.xy = vec2(_ShadowWidth) / _ScreenExtents.zw;
    u_xlat1.x = _RampAngle * 0.0174532942;
    vs_TEXCOORD3.z = cos(u_xlat1.x);
    vs_TEXCOORD3.w = sin((-u_xlat1.x));
    u_xlat16_2.x = _SideBarWidth + _SideBarOffset;
    u_xlat16_2.y = _SideBarOffset;
    u_xlat1.xy = u_xlat16_2.xy / _ScreenExtents.zz;
    vs_TEXCOORD4.xy = (-u_xlat1.xy) + vec2(0.5, 0.5);
    u_xlat1.x = _SideBarRampAngle * 0.0174532942;
    vs_TEXCOORD4.z = cos(u_xlat1.x);
    vs_TEXCOORD4.w = sin((-u_xlat1.x));
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es

precision highp float;
precision highp int;
#define HLSLCC_ENABLE_UNIFORM_BUFFERS 1
#if HLSLCC_ENABLE_UNIFORM_BUFFERS
#define UNITY_UNIFORM
#else
#define UNITY_UNIFORM uniform
#endif
#define UNITY_SUPPORTS_UNIFORM_LOCATION 1
#if UNITY_SUPPORTS_UNIFORM_LOCATION
#define UNITY_LOCATION(x) layout(location = x)
#define UNITY_BINDING(x) layout(binding = x, std140)
#else
#define UNITY_LOCATION(x)
#define UNITY_BINDING(x) layout(std140)
#endif
uniform 	vec4 _ScreenExtents;
uniform 	mediump float _RampScale;
uniform 	mediump vec4 _ShadowColor;
uniform 	mediump vec4 _ShadowOffset;
uniform 	mediump float _ShadowFeather;
uniform 	mediump vec4 _BottomColor;
uniform 	mediump float _BottomSplit;
uniform 	mediump float _Feather;
uniform 	vec4 _ClipRect;
uniform 	vec4 _GradientPoints;
uniform 	mediump vec4 _GradientColor0;
uniform 	mediump vec4 _GradientColor1;
uniform 	mediump vec4 _GradientColor2;
uniform 	mediump vec4 _GradientColor3;
in mediump vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD3;
layout(location = 0) out mediump vec4 SV_Target0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
bvec2 u_xlatb7;
mediump vec2 u_xlat16_12;
mediump float u_xlat16_18;
bool u_xlatb19;
void main()
{
    u_xlat16_0.xy = vec2(_Feather) * vec2(0.0670000017, 1.0);
    u_xlat16_12.xy = (-vs_TEXCOORD0.zw) + vec2(0.5, 0.5);
    u_xlat7.x = _ScreenExtents.w / _ScreenExtents.z;
    u_xlat7.y = 0.0670000017;
    u_xlat16_0.xy = (-u_xlat16_0.xy) * u_xlat7.xy + u_xlat16_12.xy;
    u_xlat16_0.xy = (-u_xlat16_0.xy) + abs(vs_TEXCOORD0.xy);
    u_xlat16_0.xy = u_xlat16_0.xy / vs_TEXCOORD0.zw;
    u_xlat1.x = dot(u_xlat16_0.xy, u_xlat16_0.xy);
    u_xlat1.x = sqrt(u_xlat1.x);
    u_xlat16_12.x = (-_Feather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_12.x) + u_xlat1.x;
    u_xlat16_18 = _Feather + 1.0;
    u_xlat16_18 = (-u_xlat16_12.x) + u_xlat16_18;
    u_xlat16_2.yz = (-u_xlat16_12.xx) + u_xlat16_0.xy;
    u_xlatb1.xw = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_0.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlat16_0.x = max(u_xlat1.w, u_xlat1.x);
    u_xlat16_6.x = float(1.0) / u_xlat16_18;
    u_xlat16_6.xyz = u_xlat16_6.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_6.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = (-u_xlat16_2.xyz) * u_xlat16_6.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_6.z, u_xlat16_6.y);
    u_xlat16_12.x = (-u_xlat16_6.x) + u_xlat16_12.x;
    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_12.x + u_xlat16_6.x;
    u_xlatb1.xw = greaterThanEqual(vs_TEXCOORD1.xxxy, _ClipRect.xxxy).xw;
    u_xlat1.x = u_xlatb1.x ? float(1.0) : 0.0;
    u_xlat1.w = u_xlatb1.w ? float(1.0) : 0.0;
;
    u_xlatb3.xy = greaterThanEqual(_ClipRect.zwzz, vs_TEXCOORD1.xyxx).xy;
    u_xlat3.x = u_xlatb3.x ? float(1.0) : 0.0;
    u_xlat3.y = u_xlatb3.y ? float(1.0) : 0.0;
;
    u_xlat1.xw = u_xlat1.xw * u_xlat3.xy;
    u_xlat1.x = u_xlat1.w * u_xlat1.x;
    u_xlat16_6.x = u_xlat16_0.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat16_0.x * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb19 = u_xlat16_6.x<0.0;
#endif
    if(u_xlatb19){discard;}
    u_xlat3.xy = vs_TEXCOORD3.xy + vec2(0.5, 0.5);
    u_xlat16_6.xy = u_xlat3.xy + (-vs_TEXCOORD0.zw);
    u_xlat16_2.xy = vec2(vec2(_ShadowFeather, _ShadowFeather)) * vec2(0.0670000017, 1.0);
    u_xlat16_6.xy = (-u_xlat16_2.xy) * u_xlat7.xy + u_xlat16_6.xy;
    u_xlat7.xy = vs_TEXCOORD0.xy + (-_ShadowOffset.xy);
    u_xlat16_6.xy = (-u_xlat16_6.xy) + abs(u_xlat7.xy);
    u_xlat16_6.xy = u_xlat16_6.xy / vs_TEXCOORD0.zw;
    u_xlat7.x = dot(u_xlat16_6.xy, u_xlat16_6.xy);
    u_xlat7.x = sqrt(u_xlat7.x);
    u_xlat16_18 = (-_ShadowFeather) + 1.0;
    u_xlat16_2.x = (-u_xlat16_18) + u_xlat7.x;
    u_xlat16_2.yz = (-vec2(u_xlat16_18)) + u_xlat16_6.xy;
    u_xlatb7.xy = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat16_6.xyxx).xy;
    u_xlat7.x = u_xlatb7.x ? float(1.0) : 0.0;
    u_xlat7.y = u_xlatb7.y ? float(1.0) : 0.0;
;
    u_xlat16_6.x = max(u_xlat7.y, u_xlat7.x);
    u_xlat16_12.x = _ShadowFeather + 1.0;
    u_xlat16_12.x = (-u_xlat16_18) + u_xlat16_12.x;
    u_xlat16_12.x = float(1.0) / u_xlat16_12.x;
    u_xlat16_2.xyz = u_xlat16_12.xxx * u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_2.xyz = min(max(u_xlat16_2.xyz, 0.0), 1.0);
#else
    u_xlat16_2.xyz = clamp(u_xlat16_2.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(-2.0, -2.0, -2.0) + vec3(3.0, 3.0, 3.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz * u_xlat16_2.xyz;
    u_xlat16_2.xyz = (-u_xlat16_4.xyz) * u_xlat16_2.xyz + vec3(1.0, 1.0, 1.0);
    u_xlat16_12.x = min(u_xlat16_2.z, u_xlat16_2.y);
    u_xlat16_12.x = (-u_xlat16_2.x) + u_xlat16_12.x;
    u_xlat16_6.x = u_xlat16_6.x * u_xlat16_12.x + u_xlat16_2.x;
    u_xlat16_0.x = (-u_xlat16_0.x) + u_xlat16_6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_0 = u_xlat16_0.xxxx * _ShadowColor;
    u_xlat7.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD3.zw);
    u_xlat16_2.x = float(1.0) / _RampScale;
    u_xlat7.x = u_xlat7.x * u_xlat16_2.x + 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat7.xyz = u_xlat7.xxx + (-_GradientPoints.xyz);
    u_xlat3.xyz = (-_GradientPoints.xyz) + _GradientPoints.yzw;
    u_xlat7.xyz = u_xlat7.xyz / u_xlat3.xyz;
    u_xlatb3.xyz = greaterThanEqual(vec4(1.0, 1.0, 1.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_2.x = (u_xlatb3.x) ? float(1.0) : float(0.0);
    u_xlat16_2.y = (u_xlatb3.y) ? float(1.0) : float(0.0);
    u_xlat16_2.z = (u_xlatb3.z) ? float(1.0) : float(0.0);
    u_xlatb3.xyz = greaterThanEqual(vec4(0.0, 0.0, 0.0, 0.0), u_xlat7.xyzx).xyz;
    u_xlat16_4.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);
    u_xlat16_4.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);
    u_xlat16_4.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);
    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor1.xyz) + _GradientColor2.xyz;
    u_xlat16_4.xyz = u_xlat7.yyy * u_xlat16_4.xyz + _GradientColor1.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_4.xyz = u_xlat16_2.yyy * u_xlat16_4.xyz;
    u_xlat16_5.xyz = (-_GradientColor0.xyz) + _GradientColor1.xyz;
    u_xlat16_5.xyz = u_xlat7.xxx * u_xlat16_5.xyz + _GradientColor0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyw = u_xlat16_2.xxx * u_xlat16_5.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (-_GradientColor2.xyz) + _GradientColor3.xyz;
    u_xlat16_4.xyz = u_xlat7.zzz * u_xlat16_4.xyz + _GradientColor2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.xyz = min(max(u_xlat16_4.xyz, 0.0), 1.0);
#else
    u_xlat16_4.xyz = clamp(u_xlat16_4.xyz, 0.0, 1.0);
#endif
    u_xlat16_2.xyz = u_xlat16_2.zzz * u_xlat16_4.xyz + u_xlat16_2.xyw;
    u_xlat2.xyz = u_xlat16_2.xyz + (-_BottomColor.xyz);
    u_xlat16_4.x = _BottomSplit + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7.x = !!(vs_TEXCOORD0.y>=u_xlat16_4.x);
#else
    u_xlatb7.x = vs_TEXCOORD0.y>=u_xlat16_4.x;
#endif
    u_xlat7.x = u_xlatb7.x ? 1.0 : float(0.0);
    u_xlat2.w = (-_BottomColor.w) + 1.0;
    u_xlat2 = u_xlat7.xxxx * u_xlat2 + _BottomColor;
    u_xlat16_0 = u_xlat2 * u_xlat1.xxxx + u_xlat16_0;
    SV_Target0.w = u_xlat16_0.w * vs_COLOR0.w;
    SV_Target0.xyz = u_xlat16_0.xyz;
    return;
}

#endif
"
}
}
}
}
Fallback "UI/Default"
}